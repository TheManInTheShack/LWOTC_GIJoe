class MZGrimyAnarchist_AbilitySet extends X2Ability config(GrimyPerkPorts);

var config int CAUTERIZE_CHARGES, CAUTERIZE_DAMAGE, CAUTERIZE_HEAL, CAUTERIZE_HEAL_SPREAD;

var config int LIGHT_ORDNANCE_AMMO;
var config float LIGHT_ORDNANCE_DAMAGE, LONGSHOT_RANGEMULT;

var config int VILE_CONCOCTIONS_DAMAGE;
var config array<name> VILE_CONCOCTIONS_GRENADES;

var config int SHREDDER_SHRED, SHREDDER_AP;
var config int SKULLMINE_BONUS;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	Templates.AddItem(GrimyCauterize('GrimyCauterize',default.CAUTERIZE_CHARGES, default.CAUTERIZE_DAMAGE, default.CAUTERIZE_HEAL, default.CAUTERIZE_HEAL_SPREAD,"img:///GrimyClassAN_Icons.UIPerk_item_Cauterize"));
	Templates.AddItem(GrimyLightOrdnance('GrimyLightOrdnance',default.LIGHT_ORDNANCE_AMMO,default.LIGHT_ORDNANCE_DAMAGE,"img:///UILibrary_PerkIcons.UIPerk_equalizer"));
	Templates.AddItem(GrimyVileConcoctions('GrimyVileConcoctions',default.VILE_CONCOCTIONS_DAMAGE,"img:///UILibrary_PerkIcons.UIPerk_andromedon_acidblob"));
	Templates.AddItem(GrimyGrenadeShredder('GrimyGrenadeShredder',default.SHREDDER_SHRED, default.SHREDDER_AP, "img:///UILibrary_PerkIcons.UIPerk_barage"));
	Templates.AddItem(GrimySabotage('GrimySabotage',"img:///UILibrary_PerkIcons.UIPerk_codex_techvulnerability"));
	Templates.AddItem(GrimySabotage('GrimyHostageProtocol',"img:///UILibrary_PerkIcons.UIPerk_bioelectricskin"));
	Templates.AddItem(GrimySadist('GrimySadist',default.SKULLMINE_BONUS,"img:///UILibrary_PerkIcons.UIPerk_skulljack"));
	
	Templates.AddItem(PurePassive('GrimyShellShock', "img:///UILibrary_PerkIcons.UIPerk_archon_blast"));
	Templates.AddItem(PurePassive('GrimyAirBurst', "img:///UILibrary_PerkIcons.UIPerk_bigbooms"));
	Templates.AddItem(PurePassive('GrimyDeadlyHaze', "img:///GrimyClassAN_Icons.UIPerk_ToxicCloud"));
	Templates.AddItem(GrimyLongShot());

	Templates.AddItem(GrimyShredderGun());
	Templates.AddItem(GrimyFireWall());

	return Templates;
}

static function X2AbilityTemplate GrimyLongShot()
{
	local X2AbilityTemplate						Template;
	local MZ_Effect_ModifyGrenadeRange                  Effect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'GrimyLongShot');

	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;

//BEGIN AUTOGENERATED CODE: Template Overrides 'Deflect'
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_bombard";
	Template.AbilitySourceName = 'eAbilitySource_Passive';
	//Template.AbilityIconColor = "C34144";
//END AUTOGENERATED CODE: Template Overrides 'Deflect'

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);
	
	Effect = new class'MZ_Effect_ModifyGrenadeRange';
	Effect.BuildPersistentEffect(1, true, false);
	Effect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyHelpText(), Template.IconImage, true, , Template.AbilitySourceName);
	Effect.bLaunchGrenade = true;
	Effect.bThrowGrenade = false;
	Effect.RangeChangeMult = default.LONGSHOT_RANGEMULT;
	Template.AddTargetEffect(Effect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = none;

	return Template;
}

static function X2AbilityTemplate GrimyCauterize(name TemplateName, int BonusCharges, int BonusDamage, int BonusHeal, int HealSpread, string IconImage)
{
	local X2AbilityTemplate                 Template;
	local X2AbilityCost_ActionPoints        ActionPointCost;
	local X2AbilityCharges					Charges;
	local X2AbilityCost_Charges             ChargeCost;
	local X2Condition_UnitProperty          UnitPropertyCondition;
	local X2Condition_UnitStatCheck         UnitStatCheckCondition;
	local X2Condition_UnitEffects           UnitEffectsCondition;
	local Grimy_Effect_Healing				MedikitHeal;
	local array<name>                       SkipExclusions;
	local X2Effect_ApplyWeaponDamage		WeaponDamageEffect;
	local X2Condition_Visibility                VisCondition;

	`CREATE_X2ABILITY_TEMPLATE(Template, TemplateName);
	
	Template.AdditionalAbilities.AddItem('RevivalProtocol');
	Template.IconImage = IconImage;
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.CLASS_LIEUTENANT_PRIORITY;
	Template.Hostility = eHostility_Defensive;
	Template.bDisplayInUITooltip = false;
	Template.bLimitTargetIcons = true;
	Template.AbilitySourceName = 'eAbilitySource_Perk';

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;	
	Template.AbilityCosts.AddItem(ActionPointCost);
	
	if ( BonusCharges > 0 )
	{
		Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
		Template.HideErrors.AddItem('AA_CannotAfford_Charges');
		Charges = new class'X2AbilityCharges';
		Charges.InitialCharges = BonusCharges;
		Template.AbilityCharges = Charges;

		ChargeCost = new class'X2AbilityCost_Charges';
		ChargeCost.NumCharges = 1;
		Template.AbilityCosts.AddItem(ChargeCost);
	}
	
	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SingleTargetWithSelf;

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	SkipExclusions.AddItem(class'X2StatusEffects'.default.BurningName);
	Template.AddShooterEffectExclusions(SkipExclusions);

	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeDead = true;
	UnitPropertyCondition.ExcludeFriendlyToSource = false;
	UnitPropertyCondition.ExcludeRobotic = true;
	UnitPropertyCondition.ExcludeTurret = true;
	UnitPropertyCondition.ExcludeCivilian = true;
	Template.AbilityTargetConditions.AddItem(UnitPropertyCondition);

	VisCondition = new class'X2Condition_Visibility';
	VisCondition.bRequireGameplayVisible = true;
	VisCondition.bActAsSquadsight = true;
	Template.AbilityTargetConditions.AddItem(VisCondition);

	//Hack: Do this instead of ExcludeDead, to only exclude properly-dead or bleeding-out units.
	UnitStatCheckCondition = new class'X2Condition_UnitStatCheck';
	UnitStatCheckCondition.AddCheckStat(eStat_HP, 0, eCheck_GreaterThan);
	Template.AbilityTargetConditions.AddItem(UnitStatCheckCondition);

	UnitEffectsCondition = new class'X2Condition_UnitEffects';
	UnitEffectsCondition.AddExcludeEffect(class'X2StatusEffects'.default.BleedingOutName, 'AA_UnitIsImpaired');
	Template.AbilityTargetConditions.AddItem(UnitEffectsCondition);
	
	WeaponDamageEffect = new class'X2Effect_ApplyWeaponDamage';
	WeaponDamageEffect.bIgnoreBaseDamage = true;
	WeaponDamageEffect.EffectDamageValue.Damage = BonusDamage;
	Template.AddTargetEffect(WeaponDamageEffect);
	
	//UnitStatCheckCondition = new class'X2Condition_UnitStatCheck';
	//UnitStatCheckCondition.AddCheckStat(eStat_HP, BonusDamage, eCheck_GreaterThan);

	MedikitHeal = new class'Grimy_Effect_Healing';
	MedikitHeal.PerUseHP = BonusHeal;
	MedikitHeal.HealSpread = HealSpread;
	MedikitHeal.TargetConditions.AddItem(UnitStatCheckCondition);
	Template.AddTargetEffect(MedikitHeal);

	Template.AddTargetEffect(class'X2Ability_SpecialistAbilitySet'.static.RemoveAllEffectsByDamageType());

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Template.bStationaryWeapon = true;
	Template.PostActivationEvents.AddItem('ItemRecalled');
	Template.BuildNewGameStateFn = class'X2Ability_SpecialistAbilitySet'.static.AttachGremlinToTarget_BuildGameState;
	Template.BuildVisualizationFn = class'X2Ability_SpecialistAbilitySet'.static.GremlinSingleTarget_BuildVisualization;

	Template.ActivationSpeech = 'MedicalProtocol';

	Template.bOverrideWeapon = true;
	Template.CustomSelfFireAnim = 'NO_MedicalProtocolA';
	return Template;
}

static function X2AbilityTemplate GrimySadist(name TemplateName, int Bonus, string ImageIcon) {
	local X2AbilityTemplate									Template;
	local Grimy_BonusAbilityCharges					AmmoEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, TemplateName);

	Template.IconImage = ImageIcon;
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	//Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_hunter";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	Template.bDisplayInUITacticalText = false;

	// This will tick once during application at the start of the player's turn and increase ammo of the specified items by the specified amounts
	AmmoEffect = new class'Grimy_BonusAbilityCharges';
	AmmoEffect.BuildPersistentEffect(1, false, false, , eGameRule_PlayerTurnBegin); 
	AmmoEffect.DuplicateResponse = eDupe_Allow;
	AmmoEffect.NumCharges = Bonus;
	AmmoEffect.AbilityNames.AddItem('SKULLMINEAbility');
	Template.AddTargetEffect(AmmoEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

static function X2AbilityTemplate GrimySabotage(name TemplateName, string ImageIcon) {
	local X2AbilityTemplate									Template;

	`CREATE_X2ABILITY_TEMPLATE(Template, TemplateName);
	
	Template.AdditionalAbilities.AddItem('CombatProtocol');
	Template.IconImage = ImageIcon;
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	//Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_hunter";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	Template.bDisplayInUITacticalText = false;

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

static function X2AbilityTemplate GrimyGrenadeShredder(name TemplateName, int BonusShred, int BonusAP, string ImageIcon) {
	local X2AbilityTemplate									Template;
	local Grimy_Shredder								DamageEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, TemplateName);
	
	Template.IconImage = ImageIcon;
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	//Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_hunter";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	Template.bDisplayInUITacticalText = false;

	DamageEffect = new class'Grimy_Shredder';
	DamageEffect.BuildPersistentEffect(1, true, true, true);
	DamageEffect.BonusShred = BonusShred;
	DamageEffect.BonusAP = BonusAP;
	Template.AddTargetEffect(DamageEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

static function X2AbilityTemplate GrimyLightOrdnance(name TemplateName, int Bonus, float DamageMult, string ImageIcon) {
	local X2AbilityTemplate									Template;
	local Grimy_BonusItemCharges						AmmoEffect;
	local Grimy_Effect_GrenadeDamage					DamageEffect;
	local X2AbilityTrigger_UnitPostBeginPlay			Trigger;

	`CREATE_X2ABILITY_TEMPLATE(Template, TemplateName);

	Template.IconImage = ImageIcon;
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	//Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	Trigger = new class'X2AbilityTrigger_UnitPostBeginPlay';
	Trigger.Priority = 30;
	Template.AbilityTriggers.AddItem(Trigger);

	// This will tick once during application at the start of the player's turn and increase ammo of the specified items by the specified amounts
	AmmoEffect = new class'Grimy_BonusItemCharges';
	AmmoEffect.BuildPersistentEffect(1, false, false, , eGameRule_PlayerTurnBegin); 
	AmmoEffect.DuplicateResponse = eDupe_Allow;
	AmmoEffect.AmmoCount = Bonus;
	AmmoEffect.bUtilityGrenades = true;
	AmmoEffect.bPocketGrenades = true;
	AmmoEffect.bExcluderockets = true;
	Template.AddTargetEffect(AmmoEffect);

	DamageEffect = new class'Grimy_Effect_GrenadeDamage';
	DamageEffect.BuildPersistentEffect(1, true, true, true);
	DamageEffect.DamageMult = DamageMult;
	DamageEffect.bExcluderockets = true;
	Template.AddTargetEffect(DamageEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

static function X2AbilityTemplate GrimyVileConcoctions(name TemplateName, int BonusDamage, string ImageIcon) {
	local X2AbilityTemplate									Template;
	local Grimy_Effect_GrenadeDamage					DamageEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, TemplateName);
	
	Template.IconImage = ImageIcon;
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	//Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_hunter";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	DamageEffect = new class'Grimy_Effect_GrenadeDamage';
	DamageEffect.BuildPersistentEffect(1, true, true, true);
	DamageEffect.BonusDamage = BonusDamage;
	DamageEffect.bDOTOnly = true;
	Template.AddTargetEffect(DamageEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

static function X2AbilityTemplate GrimyShredderGun()
{
	local X2AbilityTemplate Template;
	local MZ_Effect_AddSevenWeapon ItemEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'GrimyShredderGun');
	
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_shreddergun";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	ItemEffect = new class'MZ_Effect_AddSevenWeapon';
	ItemEffect.DataName = 'GrimyShredderGun';
	ItemEffect.InvSlotEnum = eInvSlot_SeptenaryWeapon;
	ItemEffect.BuildPersistentEffect(1, false, false, , eGameRule_PlayerTurnBegin); 
	Template.AddTargetEffect(ItemEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

static function X2AbilityTemplate GrimyFireWall()
{
	local X2AbilityTemplate Template;
	local MZ_Effect_AddSevenWeapon ItemEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'GrimyFireWall');
	
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_flamethrower";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	ItemEffect = new class'MZ_Effect_AddSevenWeapon';
	ItemEffect.DataName = 'GrimyFlamethrower';
	ItemEffect.InvSlotEnum = eInvSlot_SeptenaryWeapon;
	ItemEffect.BuildPersistentEffect(1, false, false, , eGameRule_PlayerTurnBegin); 
	Template.AddTargetEffect(ItemEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}