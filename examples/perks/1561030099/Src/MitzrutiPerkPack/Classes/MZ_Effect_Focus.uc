class MZ_Effect_Focus extends X2Effect_ModifyStats;

var int FocusStart, FocusMax, FocusRecovery;

var string sFocusColour, sFocusIconPath, sFocusLabel, sFocusTooltip;

//bools that control the mechanics of focus gain. the matching event listeners will only be registered for the needed type(s)
var bool GainFocusOnKill, GainOneFocusOnAssist, GainFocusEveryTurn, GainFocusEveryTurnWaterType, GainFocusWhileConcealed, GainFocusOnAnyDeath, GainFocusOnHunker, GainFocusOnDash;

struct AbilityGrantsBonus
{
	var name AbilityName;
	var int Amount;
};
var array<AbilityGrantsBonus> AbilityBoostsMaxFocus, AbilityBoostsFocusRecover, AbilityBoostsStartFocus;

struct ManaLevelModifiers
{
	//Stat changes is prolly the only one i'll use in here. Implmented mostly for rogue.
	var array<StatChange>		StatChanges;
};
var array<ManaLevelModifiers>	arrFocusModifiers;

function AddMaxFocusBoost(name AbilityName, int Amount)
{
	local AbilityGrantsBonus Bonus;

	Bonus.AbilityName = AbilityName;
	Bonus.Amount = Amount;

	AbilityBoostsMaxFocus.AddItem(Bonus);
}

function AddStartFocusBoost(name AbilityName, int Amount)
{
	local AbilityGrantsBonus Bonus;

	Bonus.AbilityName = AbilityName;
	Bonus.Amount = Amount;

	AbilityBoostsStartFocus.AddItem(Bonus);
}

function AddGainFocusBoost(name AbilityName, int Amount)
{
	local AbilityGrantsBonus Bonus;

	Bonus.AbilityName = AbilityName;
	Bonus.Amount = Amount;

	AbilityBoostsFocusRecover.AddItem(Bonus);
}

function AddNextFocusLevel(const array<StatChange> NextStatChanges)
{
	local ManaLevelModifiers NextFocusLevel;

	NextFocusLevel.StatChanges = NextStatChanges;
	arrFocusModifiers.AddItem(NextFocusLevel);
}

function RegisterForEvents(XComGameState_Effect EffectGameState)
{
	local XComGameStateHistory		History;
	local X2EventManager			EventMgr;
	local Object					EffectObj, UnitObj, PlayerObj;

	EventMgr = `XEVENTMGR;
	History = `XCOMHISTORY;

	EffectObj = EffectGameState;
	UnitObj = History.GetGameStateForObjectID(EffectGameState.ApplyEffectParameters.TargetStateObjectRef.ObjectID);
	PlayerObj = History.GetGameStateForObjectID(XComGameState_Unit(History.GetGameStateForObjectID(EffectGameState.ApplyEffectParameters.TargetStateObjectRef.ObjectID)).ControllingPlayer.ObjectID);

	//Handles the UI element.
	EventMgr.RegisterForEvent(EffectObj, 'OverrideUnitFocusUI', MZ_EffectState_Focus(EffectGameState).OnOverrideUnitFocusUI, , , UnitObj);

	//Flame Focus generated by Kills
	if ( GainFocusOnKill)
	{
		EventMgr.RegisterForEvent(EffectObj, 'UnitDied', MZ_EffectState_Focus(EffectGameState).RewardFocusOnKillCheck, ELD_OnStateSubmitted);

		if ( GainOneFocusOnAssist )
		{
			EventMgr.RegisterForEvent(EffectObj, 'UnitDied', MZ_EffectState_Focus(EffectGameState).RewardOneFocusOnAssistCheck, ELD_OnStateSubmitted);
		}
	}

	//Isms' Rogue NBK, Scouting Report
	if ( GainFocusEveryTurn )
	{
		EventMgr.RegisterForEvent(EffectObj, 'PlayerTurnBegun', MZ_EffectState_Focus(EffectGameState).RewardFocusOnEventCheck, ELD_OnStateSubmitted, , PlayerObj);
	}

	//Water focus generated on turn start. reduced recovery as current level rises.
	if ( GainFocusEveryTurnWaterType )
	{
		EventMgr.RegisterForEvent(EffectObj, 'PlayerTurnBegun', MZ_EffectState_Focus(EffectGameState).RewardFocusWaterEventCheck, ELD_OnStateSubmitted, , PlayerObj);
	}

	//Earth focus generated when hunkering down.
	if ( GainFocusOnHunker )
	{
		EventMgr.RegisterForEvent(EffectObj, 'AbilityActivated', MZ_EffectState_Focus(EffectGameState).RewardFocusOnHunkerCheck, ELD_OnStateSubmitted, , UnitObj);
	}

	//Wind focus generated by dashing
	if ( GainFocusOnDash )
	{
		EventMgr.RegisterForEvent(EffectObj, 'UnitMoveFinished', MZ_EffectState_Focus(EffectGameState).RewardFocusOnDashCheck, ELD_OnStateSubmitted, , UnitObj);
	}

	//Death focus on any death. may need to add some filtering later?
	if ( GainFocusOnAnyDeath)
	{
		EventMgr.RegisterForEvent(EffectObj, 'UnitDied', MZ_EffectState_Focus(EffectGameState).RewardFocusOnEventCheck, ELD_OnStateSubmitted);
	}

	if ( GainFocusWhileConcealed )
	{
		EventMgr.RegisterForEvent(EffectObj, 'PlayerTurnBegun', MZ_EffectState_Focus(EffectGameState).RewardFocusWhileConcealedCheck, ELD_OnStateSubmitted, , PlayerObj);
	}
}

simulated protected function OnEffectAdded(const out EffectAppliedData ApplyEffectParameters, XComGameState_BaseObject kNewTargetState, XComGameState NewGameState, XComGameState_Effect NewEffectState)
{
	local XComGameState_Unit	ActivatingUnit;
	local int					CalcMaxFocus, CalcStartFocus, CalcRecoverFocus;
	local AbilityGrantsBonus	AbilityBonus;
	local MZ_EffectState_Focus	FocusState;

	ActivatingUnit = XComGameState_Unit(kNewTargetState);
	FocusState = MZ_EffectState_Focus(NewEffectState);

	//Calculate Max Focus
	CalcMaxFocus = FocusMax;
	foreach AbilityBoostsMaxFocus(AbilityBonus)
	{
		if ( ActivatingUnit.HasSoldierAbility(AbilityBonus.AbilityName, true) )
		{
			CalcMaxFocus += AbilityBonus.Amount;
		}
	}
	//ActivatingUnit.SetUnitFloatValue('MaxFocusLevel', Max(1, CalcMaxFocus), eCleanup_BeginTactical);
	FocusState.MaxFocusLevel = Max(1, CalcMaxFocus);

	//Calculate Starting Focus.
	CalcStartFocus = FocusStart;
	foreach AbilityBoostsStartFocus(AbilityBonus)
	{
		if ( ActivatingUnit.HasSoldierAbility(AbilityBonus.AbilityName, true) )
		{
			CalcStartFocus += AbilityBonus.Amount;
		}
	}
	FocusState.FocusLevel = Clamp(CalcStartFocus, 0, CalcMaxFocus);
	//FocusState.SetFocusLevel(CalcStartFocus, ActivatingUnit, NewGameState);

	//Set Up Focus Gain Mechanics
	CalcRecoverFocus = FocusRecovery;
	foreach AbilityBoostsFocusRecover(AbilityBonus)
	{
		if ( ActivatingUnit.HasSoldierAbility(AbilityBonus.AbilityName, true) )
		{
			CalcStartFocus += AbilityBonus.Amount;
		}
	}
	FocusState.FocusRecovery = CalcRecoverFocus;

	//Set Up stat changes, for anything that actually starts with focus.
	FocusState.StatChanges = GetFocusModifiersForLevel(FocusState.FocusLevel).StatChanges;
	if (FocusState.StatChanges.Length > 0)
	{
		super.OnEffectAdded(ApplyEffectParameters, kNewTargetState, NewGameState, FocusState);
	}
}

function ManaLevelModifiers GetFocusModifiersForLevel(int FocusLevel)
{
	local ManaLevelModifiers Modifiers;

	if (FocusLevel >= 0)
	{
		if (FocusLevel >= arrFocusModifiers.Length)
			Modifiers = arrFocusModifiers[arrFocusModifiers.Length - 1];
		else
			Modifiers = arrFocusModifiers[FocusLevel];
	}

	return Modifiers;
}

DefaultProperties
{
	EffectName = "FocusLevel"
	GameStateEffectClass = class'MZ_EffectState_Focus' //to allow the listeners to be non-static.
	DuplicateResponse = eDupe_Ignore //There can be only one.
	FocusMax = 9;
	sFocusColour = "b6b3e3" //Psi Coloured, for now.
	sFocusIconPath = "img:///UILibrary_Common.UIEvent_psi"
	//gfxTacticalHUD.focusMeterIcon   this is regualr one, but it's 64x64 so it comes out ridiculous??
	sFocusLabel = "Mana"
	sFocusTooltip = "Yo Its Focus"

	FocusRecovery=3
}