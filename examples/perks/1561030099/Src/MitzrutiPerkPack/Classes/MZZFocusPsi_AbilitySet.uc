class MZZFocusPsi_AbilitySet extends X2Ability	dependson (XComGameStateContext_Ability) config(MZPerkFocus);

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	//Templates.AddItem();

	return Templates;
}

static function X2AbilityTemplate Zonde()
{
	local X2AbilityTemplate				Template;
	local X2AbilityCost_ActionPoints	ActionPointCost;
	local X2Condition_UnitProperty		TargetCondition;
	local X2Effect_ApplyWeaponDamage	DamageEffect;
	local X2Effect_ToHitModifier		HitModEffect;
	local X2Condition_AbilityProperty	AbilityCondition;
	local X2AbilityTag                  AbilityTag;
	//local X2AbilityCooldown				Cooldown;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'MZZonde');

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = true;
	Template.AbilityCosts.AddItem(ActionPointCost);
	
	//Cooldown = new class'X2AbilityCooldown';
	//Cooldown.iNumTurns = default.StormShock_Cooldown;
	//Template.AbilityCooldown = Cooldown;

	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeAlive = false;
	TargetCondition.ExcludeDead = true;
	TargetCondition.ExcludeFriendlyToSource = true;
	TargetCondition.ExcludeHostileToSource = false;
	TargetCondition.TreatMindControlledSquadmateAsHostile = false;
	TargetCondition.FailOnNonUnits = true;
	TargetCondition.ExcludeCivilian = true;
	TargetCondition.ExcludeCosmetic = true;
	Template.AbilityTargetConditions.AddItem(TargetCondition);
	//Template.AbilityMultiTargetConditions.AddItem(TargetCondition);

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeRobotic = true;
	DamageEffect = new class'X2Effect_ApplyWeaponDamage';
	DamageEffect.bIgnoreBaseDamage = true;
	DamageEffect.DamageTag = 'MZStormShock';
	DamageEffect.bIgnoreArmor = true;
	DamageEffect.TargetConditions.AddItem(TargetCondition);
	Template.AddTargetEffect(DamageEffect);
	Template.AddMultiTargetEffect(DamageEffect);

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeOrganic = true;
	DamageEffect = new class'X2Effect_ApplyWeaponDamage';
	DamageEffect.bIgnoreBaseDamage = true;
	DamageEffect.DamageTag = 'MZStormShock_Strong';
	DamageEffect.bIgnoreArmor = true;
	DamageEffect.TargetConditions.AddItem(TargetCondition);
	Template.AddTargetEffect(DamageEffect);
	Template.AddMultiTargetEffect(DamageEffect);

	HitModEffect = new class'X2Effect_ToHitModifier';
	HitModEffect.BuildPersistentEffect(2, , , , eGameRule_PlayerTurnBegin);
	HitModEffect.AddEffectHitModifier(eHit_Success, class'X2Ability_TemplarAbilitySet'.default.VoltHitMod, class'X2Ability_TemplarAbilitySet'.default.RecoilEffectName);
	HitModEffect.bApplyAsTarget = true;
	HitModEffect.bRemoveWhenTargetDies = true;
	HitModEffect.bUseSourcePlayerState = true;
	
	AbilityTag = X2AbilityTag(`XEXPANDCONTEXT.FindTag("Ability"));
	AbilityTag.ParseObj = HitModEffect;
	HitModEffect.SetDisplayInfo(ePerkBuff_Penalty, class'X2Ability_TemplarAbilitySet'.default.RecoilEffectName, `XEXPAND.ExpandString(class'X2Ability_TemplarAbilitySet'.default.RecoilEffectDesc), "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Recoil");

	AbilityTag.ParseObj = none;
	
	AbilityCondition = new class'X2Condition_AbilityProperty';
	AbilityCondition.OwnerHasSoldierAbilities.AddItem('Reverberation');
	HitModEffect.TargetConditions.AddItem(default.LivingTargetOnlyProperty);
	HitModEffect.TargetConditions.AddItem(AbilityCondition);
	Template.AddTargetEffect(HitModEffect);
	//Template.AddMultiTargetEffect(HitModEffect);

//BEGIN AUTOGENERATED CODE: Template Overrides 'Volt'
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.CustomFireAnim = 'HL_Volt';
	Template.ActivationSpeech = 'Volt';
//END AUTOGENERATED CODE: Template Overrides 'Volt'
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Offensive;
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_volt";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.CLASS_SQUADDIE_PRIORITY;
	Template.AbilityConfirmSound = "TacticalUI_ActivateAbility";

	Template.TargetingMethod = class'X2TargetingMethod_Volt';
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.ActionFireClass = class'MZ_Action_BlueVolt';
	
	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;
	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotLostSpawnIncreasePerUse;

	//Template.DamagePreviewFn = VoltDamagePreview;
	//Template.PostActivationEvents.AddItem('MZStormShockActivated');

	return Template;
}

/*
static function XComGameState ChainOnce_BuildGameState(XComGameStateContext Context)
{
	local XComGameStateHistory			History;
	local XComGameStateContext_Ability	AbilityContext;
	local array<X2Condition>			TargetConditions;
	local X2Condition_UnitEffects       EffectsCondition;
	local MZ_Condition_VariableRange	RangeCondition;
	local MZ_Condition_ChainLogic		ChainCondition;
	local array<StateObjectReference>	VisibleTargets;
	local StateObjectReference			TargetRef, ActiveUnit;
	
	History = `XCOMHISTORY;

	AbilityContext = XComGameStateContext_Ability(Context);
	ActiveUnit = AbilityContext.InputContext.PrimaryTarget;

	ChainCondition = new class'MZ_Condition_ChainLogic';
	ChainCondition.Caster = XComGameState_Unit(History.GetGameStateForObjectID( AbilityContext.InputContext.SourceObject.ObjectID) );
	TargetConditions.AddItem(ChainCondition);

	//TargetConditions.AddItem(default.LivingTargetUnitOnlyProperty);
	TargetConditions.AddItem(default.GameplayVisibilityCondition);
	//TargetConditions.AddItem(new class'MZ_Condition_NotXCom');

	RangeCondition = new class'MZ_Condition_VariableRange';
	RangeCondition.Range = default.ChainOnce_ChainRange;
	//RangeCondition.AddBonusRange('MZStormGenerator', default.StormGenerator_BonusRange);
	TargetConditions.AddItem(RangeCondition);

	EffectsCondition = new class'X2Condition_UnitEffects';
	EffectsCondition.AddExcludeEffect('MindControl', 'AA_UnitIsImmune');
	EffectsCondition.AddExcludeEffect('MimicBeaconEffect', 'AA_UnitIsImmune');
	TargetConditions.AddItem(EffectsCondition);
	
	//Rebuild the multitarget list
	AbilityContext.InputContext.MultiTargets.Length = 0;

	class'MZ_Helper_Tactical'.static.GetAllVisibleUnitsForUnit(ActiveUnit.ObjectID,VisibleTargets,TargetConditions);
		
	if ( VisibleTargets.Length > 0 )
	{
		foreach VisibleTargets(TargetRef)
		{
			if ( TargetRef != AbilityContext.InputContext.PrimaryTarget)
			{
				AbilityContext.InputContext.MultiTargets.AddItem(TargetRef );
				break;
			}
		}
	}

	//pass off the new context to the normal ability game state function
	return TypicalAbility_BuildGameState(Context);
}
*/

static function XComGameState ChainByMana_BuildGameState(XComGameStateContext Context)
{
	local XComGameStateHistory			History;
	local XComGameStateContext_Ability	AbilityContext;
	local array<X2Condition>			TargetConditions;
	local X2Condition_UnitEffects       EffectsCondition;
	local MZ_Condition_VariableRange	RangeCondition;
	local MZ_Condition_ChainLogic		ChainCondition;
	local array<StateObjectReference>	VisibleTargets;
	local StateObjectReference			TargetRef, ActiveUnit;
	
	History = `XCOMHISTORY;

	AbilityContext = XComGameStateContext_Ability(Context);
	ActiveUnit = AbilityContext.InputContext.PrimaryTarget;

	ChainCondition = new class'MZ_Condition_ChainLogic';
	ChainCondition.Caster = XComGameState_Unit(History.GetGameStateForObjectID( AbilityContext.InputContext.SourceObject.ObjectID) );
	TargetConditions.AddItem(ChainCondition);

	//TargetConditions.AddItem(default.LivingTargetUnitOnlyProperty);
	TargetConditions.AddItem(default.GameplayVisibilityCondition);
	//TargetConditions.AddItem(new class'MZ_Condition_NotXCom');

	RangeCondition = new class'MZ_Condition_VariableRange';
	RangeCondition.Range = 4; //default.ChainOnce_ChainRange;
	//RangeCondition.AddBonusRange('MZStormGenerator', default.StormGenerator_BonusRange);
	TargetConditions.AddItem(RangeCondition);

	EffectsCondition = new class'X2Condition_UnitEffects';
	EffectsCondition.AddExcludeEffect('MindControl', 'AA_UnitIsImmune');
	EffectsCondition.AddExcludeEffect('MimicBeaconEffect', 'AA_UnitIsImmune');
	TargetConditions.AddItem(EffectsCondition);
	
	//Rebuild the multitarget list
	AbilityContext.InputContext.MultiTargets.Length = 0;

	class'MZ_Helper_Tactical'.static.GetAllVisibleUnitsForUnit(ActiveUnit.ObjectID,VisibleTargets,TargetConditions);
		
	if ( VisibleTargets.Length > 0 )
	{
		foreach VisibleTargets(TargetRef)
		{
			if ( TargetRef != AbilityContext.InputContext.PrimaryTarget)
			{
				AbilityContext.InputContext.MultiTargets.AddItem(TargetRef );
				break;
			}
		}
	}

	//pass off the new context to the normal ability game state function
	return TypicalAbility_BuildGameState(Context);
}